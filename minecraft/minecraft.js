import TochkaPaymentChecker from './payment-checker.js';

document.addEventListener('DOMContentLoaded', function() {
    const serverIP = '188.127.241.209';
    const serverPort = 25971;
    const statusElement = document.getElementById('server-status');
    const playersOnlineElement = document.getElementById('players-online');
    const playersMaxElement = document.getElementById('players-max');
    
    // –§—É–Ω–∫—Ü–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞
    function setupCopyButtons() {
        const copyButton1 = document.getElementById('copy-button-1');
        const copyButton2 = document.getElementById('copy-button-2');
        
        if (copyButton1) {
            copyButton1.addEventListener('click', () => {
                const ip = document.getElementById('server-ip-1').value;
                navigator.clipboard.writeText(ip);
                copyButton1.innerHTML = '<i class="fas fa-check"></i>';
                setTimeout(() => {
                    copyButton1.innerHTML = '<i class="fas fa-copy"></i>';
                }, 2000);
            });
        }

        if (copyButton2) {
            copyButton2.addEventListener('click', () => {
                const ip = document.getElementById('server-ip-2').value;
                navigator.clipboard.writeText(ip);
                copyButton2.innerHTML = '<i class="fas fa-check"></i>';
                setTimeout(() => {
                    copyButton2.innerHTML = '<i class="fas fa-copy"></i>';
                }, 2000);
            });
        }
    }

    async function checkServerStatus() {
        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
            
            statusElement.innerHTML = `
                <span class="loading-spinner"><i class="fas fa-spinner fa-spin"></i></span>
                –ü—Ä–æ–≤–µ—Ä–∫–∞...
            `;

            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª
            const response = await fetch('server-status.json', {
                signal: controller.signal,
                headers: {
                    'Cache-Control': 'no-cache',
                    'Pragma': 'no-cache'
                }
            });
            
            clearTimeout(timeoutId);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            console.log('üìã –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:', data);

            if (data.online) {
                console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω');
                statusElement.innerHTML = '–û–Ω–ª–∞–π–Ω';
                statusElement.style.color = '#4CAF50';
                playersOnlineElement.textContent = data.players?.online || '0';
                playersMaxElement.textContent = data.players?.max || '0';
            } else {
                console.log('‚ùå –°–µ—Ä–≤–µ—Ä –æ—Ñ—Ñ–ª–∞–π–Ω');
                statusElement.innerHTML = '–û—Ñ—Ñ–ª–∞–π–Ω';
                statusElement.style.color = '#f44336';
                playersOnlineElement.textContent = '0';
                playersMaxElement.textContent = '0';
            }
        } catch (error) {
            console.error('üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
            
            statusElement.innerHTML = error.name === 'AbortError' 
                ? '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è' 
                : '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏';
            
            statusElement.style.color = '#f44336';
            playersOnlineElement.textContent = '0';
            playersMaxElement.textContent = '0';
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞...');
    setupCopyButtons();
    checkServerStatus();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    setInterval(checkServerStatus, 60000);

    document.querySelectorAll('.accordion-header').forEach(button => {
        button.addEventListener('click', () => {
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ accordion items
            document.querySelectorAll('.accordion-item').forEach(item => {
                if (item !== button.parentElement && item.classList.contains('active')) {
                    item.classList.remove('active');
                }
            });
            
            // –ó–∞—Ç–µ–º –æ—Ç–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π accordion item
            const accordionItem = button.parentElement;
            accordionItem.classList.toggle('active');
        });
    });

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modalOverlay = document.createElement('div');
    modalOverlay.className = 'modal-overlay';
    modalOverlay.innerHTML = `
        <div class="modal-card">
            <button class="modal-close">&times;</button>
            <h3 class="modal-title"></h3>
            <div class="modal-price"></div>
            <form class="minecraft-login-form">
                <input type="text" 
                       class="minecraft-login-input" 
                       placeholder="–í–∞—à –ª–æ–≥–∏–Ω Minecraft"
                       required>
                <button type="submit" class="pay-button">–û–ø–ª–∞—Ç–∏—Ç—å</button>
            </form>
        </div>
    `;
    document.body.appendChild(modalOverlay);

    const modal = {
        overlay: modalOverlay,
        card: modalOverlay.querySelector('.modal-card'),
        closeBtn: modalOverlay.querySelector('.modal-close'),
        title: modalOverlay.querySelector('.modal-title'),
        price: modalOverlay.querySelector('.modal-price'),
        form: modalOverlay.querySelector('.minecraft-login-form'),
        currentPrice: 0,
        currentTitle: ''
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.pricing-card').forEach(card => {
        card.addEventListener('click', function() {
            modal.currentTitle = this.querySelector('h4').textContent;
            modal.currentPrice = this.querySelector('.price').textContent;
            
            modal.title.textContent = modal.currentTitle;
            modal.price.textContent = modal.currentPrice;
            modal.overlay.classList.add('active');
        });
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    modal.closeBtn.addEventListener('click', () => {
        modal.overlay.classList.remove('active');
    });

    modal.overlay.addEventListener('click', (e) => {
        if (e.target === modal.overlay) {
            modal.overlay.classList.remove('active');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    modal.form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const login = this.querySelector('.minecraft-login-input').value;
        const price = parseInt(modal.currentPrice.replace('‚ÇΩ', ''));

        showLoadingIndicator();
        
        try {
            const paymentChecker = new TochkaPaymentChecker();
            const paymentResult = await paymentChecker.checkPayment(price, login);
            
            if (paymentResult.found) {
                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist
                const response = await fetch('/api/add-to-whitelist', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        minecraftLogin: login,
                        paymentDetails: paymentResult.paymentDetails
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    window.location.href = '/minecraft/success.html';
                } else {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ whitelist');
                }
            } else {
                alert('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –ª–æ–≥–∏–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.');
        } finally {
            hideLoadingIndicator();
        }
    });
});

function showLoadingIndicator() {
    const button = document.querySelector('.payment-btn');
    button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –û–±—Ä–∞–±–æ—Ç–∫–∞...';
    button.disabled = true;
}

function hideLoadingIndicator() {
    const button = document.querySelector('.payment-btn');
    button.innerHTML = '–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø';
    button.disabled = false;
}

document.getElementById('payment-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    showLoadingIndicator();
    
    const minecraftLogin = document.getElementById('minecraft-login').value;
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—à –±—ç–∫–µ–Ω–¥
        const response = await fetch('/api/create-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                minecraftLogin: minecraftLogin,
                amount: 50
            })
        });

        const result = await response.json();
        
        if (result.confirmationUrl) {
            window.location.href = result.confirmationUrl;
        } else {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
        hideLoadingIndicator();
    }
});
