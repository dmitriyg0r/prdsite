document.addEventListener('DOMContentLoaded', function() {
    const fileCategories = {
        '–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–ú–∞—Ç. –∞–Ω–∞–ª–∏–∑': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–§–∏–∑. –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–û—Å–Ω–æ–≤—ã –Ω–∞—É—á. –∏—Å—Å–ª–µ–¥.': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–ò–Ω–æ—Å—Ç. —è–∑—ã–∫': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–ü–û–ó–ò': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–î–∏—Å–∫—Ä–µ—Ç. –º–∞—Ç.': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–≠–∫–æ–Ω–æ–º–∏–∫–∞': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏'],
        '–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º': ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã', '–õ–µ–∫—Ü–∏–∏']
    };

    const categoryIcons = {
        '–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã': 'üíª',
        '–ú–∞—Ç. –∞–Ω–∞–ª–∏–∑': 'üìä',
        '–§–∏–∑. –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞': 'üèãÔ∏è',
        '–û—Å–Ω–æ–≤—ã –Ω–∞—É—á. –∏—Å—Å–ª–µ–¥.': 'üîç',
        '–ò–Ω–æ—Å—Ç. —è–∑—ã–∫': 'üåç',
        '–ü–û–ó–ò': 'üîê',
        '–î–∏—Å–∫—Ä–µ—Ç. –º–∞—Ç.': 'üßÆ',
        '–≠–∫–æ–Ω–æ–º–∏–∫–∞': 'üí∞',
        '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': 'üóÑÔ∏è',
        '–ê–ª–≥–æ—Ä–∏—Ç–º–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≥—Ä–∞–º–º': 'üñ•Ô∏è'
    };

    let fileStorage = {};

    const categoriesContainer = document.getElementById('file-categories');
    const categorySelect = document.getElementById('category-select');
    const folderSelect = document.getElementById('folder-select');
    const uploadForm = document.getElementById('upload-form');
    const uploadMessage = document.getElementById('upload-message');
    const fileInput = document.getElementById('file-input');
    const fileLabel = document.querySelector('.file-input-label');
    const fileName = document.getElementById('file-name');

    for (const category in fileCategories) {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = `${categoryIcons[category]} ${category}`;
        categorySelect.appendChild(option);
    }

    categorySelect.addEventListener('change', function() {
        const selectedCategory = categorySelect.value;
        folderSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É</option>';
        fileCategories[selectedCategory].forEach(folder => {
            const option = document.createElement('option');
            option.value = folder;
            option.textContent = folder;
            folderSelect.appendChild(option);
        });
    });

    function displayFiles() {
        categoriesContainer.innerHTML = '';
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        const sortedCategories = Object.entries(fileStorage).sort((a, b) => a[0].localeCompare(b[0]));
        
        for (const [category, folders] of sortedCategories) {
            const categoryDiv = document.createElement('div');
            categoryDiv.className = 'file-category';
            
            const categoryTitle = document.createElement('h3');
            categoryTitle.textContent = `${categoryIcons[category] || 'üìÅ'} ${category}`;
            categoryDiv.appendChild(categoryTitle);
            
            const folderList = document.createElement('ul');
            
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞–ø–æ–∫ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            const sortedFolders = Object.entries(folders).sort((a, b) => a[0].localeCompare(b[0]));
            
            for (const [folder, files] of sortedFolders) {
                const listItem = document.createElement('li');
                const folderHeader = document.createElement('div');
                folderHeader.className = 'folder-header';
                
                const arrow = document.createElement('span');
                arrow.className = 'folder-arrow';
                arrow.textContent = '‚ñ∂';
                
                const folderName = document.createElement('span');
                folderName.className = 'folder-name';
                folderName.textContent = `${folder} (${files.length})`;
                
                folderHeader.appendChild(arrow);
                folderHeader.appendChild(folderName);
                listItem.appendChild(folderHeader);

                const filesList = document.createElement('ul');
                filesList.className = 'files-list collapsed';

                // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                const sortedFiles = [...files].sort((a, b) => a.localeCompare(b));

                sortedFiles.forEach(file => {
                    const fileItem = document.createElement('li');
                    const fileItemContent = document.createElement('div');
                    fileItemContent.className = 'file-item';

                    const fileName = document.createElement('span');
                    fileName.textContent = file;
                    fileItemContent.appendChild(fileName);

                    const downloadButton = document.createElement('a');
                    downloadButton.href = encodeURI(`uploads/${category}/${folder}/${file}`);
                    downloadButton.textContent = '–°–∫–∞—á–∞—Ç—å';
                    downloadButton.className = 'download-button';
                    downloadButton.download = file; // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç download
                    fileItemContent.appendChild(downloadButton);

                    fileItem.appendChild(fileItemContent);
                    filesList.appendChild(fileItem);
                });

                listItem.appendChild(filesList);
                folderList.appendChild(listItem);
            }
            
            categoryDiv.appendChild(folderList);
            categoriesContainer.appendChild(categoryDiv);
        }
    }
    
    
    

    function loadExistingFiles() {
        fetch('get_files.php')
            .then(response => response.text()) // –ò–∑–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å –Ω–∞ text()
            .then(text => {
                console.log('Raw response text:', text); // –í—ã–≤–µ–¥–∏—Ç–µ —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
                try {
                    const data = JSON.parse(text);
                    fileStorage = data;
                    displayFiles();
                } catch (error) {
                    console.error('JSON parse error:', error);
                    console.log('Raw response text:', text); // –í—ã–≤–µ–¥–∏—Ç–µ —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç
                }
            })
            .catch(error => {
                console.error('Error loading existing files:', error);
            });
    }
    
    
    

    loadExistingFiles();

    const showUploadFormButton = document.getElementById('show-upload-form');
    const uploadFormContainer = document.getElementById('upload-form-container');

    if (showUploadFormButton && uploadFormContainer) {
        showUploadFormButton.addEventListener('click', function() {
            uploadFormContainer.classList.toggle('show');
        });

        // –ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
        document.addEventListener('click', function(event) {
            if (!uploadFormContainer.contains(event.target) && event.target !== showUploadFormButton) {
                uploadFormContainer.classList.remove('show');
            }
        });
    }

    uploadForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
            const adminPassword = prompt("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:");
            if (!adminPassword) return;

            if (adminPassword !== "Gg3985502") {
                uploadMessage.textContent = "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
                return;
            }

            uploadMessage.textContent = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...";
            const formData = new FormData(uploadForm);
            formData.append('admin_password', adminPassword);

            const response = await fetch('downloads.php', {
                method: 'POST',
                body: formData
            });

            const data = await response.json();
            
            if (data.status === 'success') {
                uploadMessage.textContent = data.message;
                
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
                const category = formData.get('category');
                const folder = formData.get('folder');
                
                if (!fileStorage[category]) {
                    fileStorage[category] = {};
                }
                if (!fileStorage[category][folder]) {
                    fileStorage[category][folder] = [];
                }
                
                data.files.forEach(file => {
                    if (!fileStorage[category][folder].includes(file)) {
                        fileStorage[category][folder].push(file);
                    }
                });

                uploadForm.reset();
                fileName.textContent = '';
                fileLabel.style.borderColor = 'var(--button-background)';
                displayFiles();
                uploadFormContainer.classList.remove('show');
            } else {
                uploadMessage.textContent = data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ';
            }
        } catch (error) {
            console.error('Error:', error);
            uploadMessage.textContent = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`;
        }
    });

    const themeToggle = document.getElementById('theme-toggle');
    const menuToggle = document.getElementById('menu-toggle');
    const menu = document.getElementById('menu');
    const body = document.body;

    // Theme toggle
    themeToggle.addEventListener('click', function() {
        body.classList.toggle('dark-theme');
        localStorage.setItem('theme', body.classList.contains('dark-theme') ? 'dark' : 'light');
    });

    // Set initial theme
    if (localStorage.getItem('theme') === 'dark') {
        body.classList.add('dark-theme');
    }

    // Menu toggle
    menuToggle.addEventListener('click', function(event) {
        menu.classList.toggle('show');
        event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
    });

    // Close menu when clicking outside
    document.addEventListener('click', function(event) {
        if (!menu.contains(event.target) && !menuToggle.contains(event.target)) {
            menu.classList.remove('show');
        }
    });

    if (fileInput && fileLabel && fileName) {
        fileInput.addEventListener('change', function(e) {
            if (this.files && this.files.length > 0) {
                if (this.files.length === 1) {
                    fileName.textContent = `–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${this.files[0].name}`;
                } else {
                    fileName.textContent = `–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${this.files.length}`;
                }
                fileLabel.style.borderColor = 'var(--button-hover)';
            } else {
                fileName.textContent = '';
                fileLabel.style.borderColor = 'var(--button-background)';
            }
        });

        // Drag & Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        fileLabel.addEventListener('dragover', function(e) {
            e.preventDefault();
            this.classList.add('dragover');
        });

        fileLabel.addEventListener('dragleave', function(e) {
            e.preventDefault();
            this.classList.remove('dragover');
        });

        fileLabel.addEventListener('drop', function(e) {
            e.preventDefault();
            this.classList.remove('dragover');
            
            if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
                fileInput.files = e.dataTransfer.files;
                if (e.dataTransfer.files.length === 1) {
                    fileName.textContent = `–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: ${e.dataTransfer.files[0].name}`;
                } else {
                    fileName.textContent = `–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${e.dataTransfer.files.length}`;
                }
                fileLabel.style.borderColor = 'var(--button-hover)';
            }
        });
    }
});
